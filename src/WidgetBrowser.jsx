import { useState } from "react";
import Card from "./components/Card";
import CardContent from "./components/CardContent";
import Input from "./components/Input";
import Button from "./components/Button";
import { Tabs, TabsList, TabsTrigger } from "./components/Tabs";
import { Moon, Sun, Languages } from "lucide-react";

const OVERVIEW = [
  {
    icon: "üß±",
    title: { zh: "ÁµêÊßã / Áï´Èù¢Êû∂Êßã", en: "Structure / App Skeleton" },
    widgets: [
      { name: "Scaffold", zh: "È†ÅÈù¢Ê°ÜÊû∂" },
      { name: "AppBar", zh: "‰∏äÊñπÊáâÁî®Âàó" },
      { name: "BottomNavigationBar", zh: "Â∫ïÈÉ®Â∞éË¶ΩÂàó" },
      { name: "TabBar", zh: "ÂàÜÈ†ÅÂàó" },
      { name: "MaterialApp", zh: "Ê†πÊáâÁî®ÂÖÉ‰ª∂" },
    ]
  },
  {
    icon: "üìê",
    title: { zh: "‰ΩàÂ±ÄÔºàLayoutÔºâ", en: "Layout" },
    widgets: [
      { name: "Column", zh: "ÂûÇÁõ¥ÊéíÂàó" },
      { name: "Row", zh: "Ê∞¥Âπ≥ÊéíÂàó" },
      { name: "Expanded", zh: "ÂΩàÊÄßÁ©∫Èñì" },
      { name: "Stack", zh: "ÁñäÂä†ÂÖÉ‰ª∂" },
    ]
  },
  {
    icon: "üì¶",
    title: { zh: "ÂÆπÂô®ËàáË£ùÈ£æ", en: "Container & Decoration" },
    widgets: [
      { name: "Container", zh: "Âü∫Êú¨ÂÆπÂô®" },
      { name: "Card", zh: "Âç°ÁâáÂÖÉ‰ª∂" },
      { name: "DecoratedBox", zh: "Ë£ùÈ£æÁõí" },
      { name: "ClipRRect", zh: "Ë£ÅÂàáÁü©ÂΩ¢" },
    ]
  },
  {
    icon: "üßæ",
    title: { zh: "ÊñáÂ≠óËàáÊ®£Âºè", en: "Text & Style" },
    widgets: [
      { name: "Text", zh: "Âü∫Êú¨ÊñáÂ≠ó" },
      { name: "RichText", zh: "Ë±êÂØåÊñáÂ≠ó" },
      { name: "DefaultTextStyle", zh: "È†êË®≠Ê®£Âºè" },
    ]
  },
  {
    icon: "üé®",
    title: { zh: "ÂúñÁâáËàáÂ™íÈ´î", en: "Images & Media" },
    widgets: [
      { name: "Image.asset", zh: "Ë≥áÊ∫êÂúñÁâá" },
      { name: "Image.network", zh: "Á∂≤Ë∑ØÂúñÁâá" },
      { name: "Icon", zh: "ÂúñÊ®ô" },
    ]
  },
  {
    icon: "üîò",
    title: { zh: "ÊåâÈàïËàá‰∫íÂãï", en: "Buttons & Interaction" },
    widgets: [
      { name: "ElevatedButton", zh: "Á´ãÈ´îÊåâÈàï" },
      { name: "TextButton", zh: "ÊñáÂ≠óÊåâÈàï" },
      { name: "GestureDetector", zh: "ÊâãÂã¢ÂÅµÊ∏¨" },
    ]
  },
  {
    icon: "üñ±",
    title: { zh: "ÊªëÂãïËàáÊ∏ÖÂñÆ", en: "Scrolling & Lists" },
    widgets: [
      { name: "ListView", zh: "Ê∏ÖÂñÆÂàóË°®" },
      { name: "GridView", zh: "Á∂≤Ê†ºÂàóË°®" },
      { name: "ListTile", zh: "Ê∏ÖÂñÆÈ†ÖÁõÆ" },
    ]
  },
  {
    icon: "‚úçÔ∏è",
    title: { zh: "Ë°®ÂñÆËàáËº∏ÂÖ•", en: "Form & Input" },
    widgets: [
      { name: "TextField", zh: "ÊñáÂ≠óËº∏ÂÖ•Ê¨Ñ" },
      { name: "Checkbox", zh: "ÂãæÈÅ∏Ê°Ü" },
      { name: "Slider", zh: "ÊªëÊ°ø" },
    ]
  },
  {
    icon: "üîÑ",
    title: { zh: "ÂãïÁï´ËàáË≥áÊñôËôïÁêÜ", en: "Animation & Async" },
    widgets: [
      { name: "AnimatedContainer", zh: "ÂãïÁï´ÂÆπÂô®" },
      { name: "FutureBuilder", zh: "ÈùûÂêåÊ≠•ËôïÁêÜ" },
    ]
  },
  {
    icon: "üõ†",
    title: { zh: "Â∑•ÂÖ∑Âûã Widget", en: "Utility Widgets" },
    widgets: [
      { name: "SafeArea", zh: "ÂÆâÂÖ®ÂçÄÂüü" },
      { name: "Theme", zh: "‰∏ªÈ°åÊéßÂà∂" },
    ]
  },
  {
    icon: "üåô",
    title: { zh: "iOS È¢®Ê†ºÂÖÉ‰ª∂", en: "Cupertino Widgets" },
    widgets: [
      { name: "CupertinoButton", zh: "iOS ÊåâÈàï" },
      { name: "CupertinoNavigationBar", zh: "iOS Â∞éË¶ΩÂàó" },
    ]
  }
];

const TREE = `
MaterialApp / CupertinoApp
  |-- Scaffold
      |-- AppBar                  -> È†ÇÈÉ®Â∑•ÂÖ∑Âàó / Top App Bar
      |-- body                    -> ‰∏ªÁï´Èù¢ÂÖßÂÆπ / Main Content
      |   |-- Column / Row / Stack
      |       |-- Text, Button, Container, ...
      |-- drawer                 -> ÂÅ¥ÈÇäÈÅ∏ÂñÆ / Side Drawer
      |-- bottomNavigationBar   -> Â∫ïÈÉ®Â∞éË¶ΩÂàó / Bottom Navigation Bar
      |-- floatingActionButton  -> ÊºÇÊµÆÊåâÈàï / Floating Action Button
`;

const TABLE = [
  { name: "appBar", belongsTo: "Scaffold", type: "AppBar Widget", zh: "È†ÇÈÉ®Â∑•ÂÖ∑Âàó", en: "Top app bar" },
  { name: "actions", belongsTo: "AppBar", type: "List<Widget>", zh: "ÂäüËÉΩÊåâÈàïÂàó", en: "Action button list" },
  { name: "body", belongsTo: "Scaffold", type: "Widget", zh: "‰∏ªË¶ÅÂÖßÂÆπÂçÄ", en: "Main content" },
  { name: "floatingActionButton", belongsTo: "Scaffold", type: "FloatingActionButton", zh: "ÊºÇÊµÆÊåâÈàï", en: "FAB button" },
  { name: "drawer", belongsTo: "Scaffold", type: "Drawer", zh: "ÂÅ¥ÈÇäÈÅ∏ÂñÆ", en: "Side drawer" },
  { name: "bottomNavigationBar", belongsTo: "Scaffold", type: "BottomNavigationBar", zh: "Â∫ïÈÉ®Â∞éË¶ΩÂàó", en: "Bottom nav bar" },
  { name: "title", belongsTo: "AppBar", type: "Widget", zh: "Ê®ôÈ°å", en: "Title" },
  { name: "leading", belongsTo: "AppBar", type: "Widget", zh: "Â∑¶ÂÅ¥ÂúñÊ®ô", en: "Leading icon" },
];

export default function WidgetBrowser() {
  const [lang, setLang] = useState("zh");
  const [darkMode, setDarkMode] = useState(false);

  const toggleDark = () => {
    setDarkMode(!darkMode);
    document.documentElement.classList.toggle("dark", !darkMode);
  };

  return (
    <div className="min-h-screen px-4 py-6 bg-white dark:bg-zinc-900 text-zinc-900 dark:text-white transition-colors md:px-8 lg:px-12">
      <div className="max-w-5xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Flutter Widget Browser</h1>
          <div className="flex gap-2">
            <Button variant="ghost" size="icon" onClick={toggleDark}>
              {darkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
            </Button>
            <Button variant="ghost" size="icon" onClick={() => setLang(lang === "zh" ? "en" : "zh")}>
              <Languages className="w-5 h-5" />
            </Button>
          </div>
        </div>

        <div className="grid gap-6">
          {OVERVIEW.map(section => (
            <Card key={section.title.en}>
              <CardContent>
                <h2 className="text-lg font-semibold mb-2">{section.icon} {section.title[lang]}</h2>
                <ul className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-y-1 text-sm text-zinc-800 dark:text-zinc-200">
                  {section.widgets.map(w => (
                    <li key={w.name}>- {w.name} / {w.zh}</li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="my-10" />

        <Card className="mb-8">
          <CardContent>
            <h2 className="text-lg font-semibold mb-2">{lang === "zh" ? "ÈöéÂ±§ÁµêÊßãÂúñ" : "Widget Tree Structure"}</h2>
            <pre className="bg-zinc-100 dark:bg-zinc-800 p-4 rounded text-sm overflow-auto whitespace-pre-wrap">
              {TREE}
            </pre>
          </CardContent>
        </Card>

        <Card>
          <CardContent>
            <h2 className="text-lg font-semibold mb-4">{lang === "zh" ? "Ë©≥Á¥∞Â±¨ÊÄßÂ∞çÁÖßË°®" : "Detailed Property Table"}</h2>
            <div className="overflow-x-auto text-sm">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="border-b dark:border-zinc-700 text-left">
                    <th className="py-2 px-2">ÂêçÁ®±</th>
                    <th className="py-2 px-2">ÊâÄÂ±¨</th>
                    <th className="py-2 px-2">È°ûÂûã</th>
                    <th className="py-2 px-2">{lang === "zh" ? "ÂäüËÉΩÔºàÁπÅÔºâ" : "Description"}</th>
                  </tr>
                </thead>
                <tbody>
                  {TABLE.map(row => (
                    <tr key={row.name} className="border-b last:border-none dark:border-zinc-800">
                      <td className="py-2 px-2 font-mono">{row.name}</td>
                      <td className="py-2 px-2">{row.belongsTo}</td>
                      <td className="py-2 px-2">{row.type}</td>
                      <td className="py-2 px-2">{lang === "zh" ? row.zh : row.en}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}